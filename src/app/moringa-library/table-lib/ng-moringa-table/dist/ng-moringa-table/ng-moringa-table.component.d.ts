import { OnInit, OnChanges, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
interface CardButton {
    label?: string;
    icon?: string;
    targetId: string;
    action?: () => void;
}
interface ActionButton {
    label?: string;
    tooltip: string;
    icon?: string;
    className?: string;
    isDropdown?: boolean;
    options?: string[];
    action?: (row: any) => void;
    dropdownAction?: (selected: string, row: any) => void;
}
export declare class NgMoringaTableComponent implements OnInit, OnChanges {
    type: string;
    data: any[];
    columns: {
        key: string;
        label: string;
    }[];
    showActions: boolean;
    variant: string;
    imgstatus: string;
    title?: string;
    sub?: string;
    icon?: string;
    moringaHeader: boolean;
    showFooter: boolean;
    collapsible: boolean;
    idPrefix?: string;
    headerButtons: CardButton[];
    actionButtons: ActionButton[];
    searchBy?: string;
    searchFilter: boolean;
    Sorting: boolean;
    autoGenerateColumns: boolean;
    excludeColumns: string[];
    progressBy?: string;
    paginated: boolean;
    pageSize: number;
    statusMap: Record<string, string>;
    rowAction: EventEmitter<{
        action: string;
        row: any;
    }>;
    internalIdPrefix: string;
    isCollapsed: boolean;
    activeRowIndex: number | null;
    selectedRows: any[];
    filteredData: any[];
    dataFilters: boolean;
    searchKeyword: string;
    selectedOption: string;
    startDate: Date | null;
    endDate: Date | null;
    currentPage: number;
    selectedDate: Date;
    selectedMonth: number;
    selectedYear: number;
    datePicker: boolean;
    sortKey: string | null;
    sortAsc: boolean;
    months: string[];
    years: number[];
    dayNames: string[];
    calendarDays: Date[];
    ngOnInit(): void;
    ngOnChanges(): void;
    toggleFilters(): void;
    applyFilters(): void;
    sortByColumn(key: string): void;
    onSearchKeywordChange(value: string): void;
    onSearchOptionChange(event: Event): void;
    toggleCalendar(): void;
    generateCalendar(): void;
    selectDate(date: Date): void;
    isSelected(date: Date): boolean;
    cancel(): void;
    confirm(): void;
    setColumns(): void;
    normalizeActionButtons(): void;
    get prefix(): string;
    get shouldShowSearchOptions(): boolean;
    get searchKey(): string;
    get searchOptions(): string[];
    get pagedData(): any[];
    get totalPages(): number;
    get progressValue(): number;
    getStatusStyles(status: string): {
        tagClass: string;
        progressClass: string;
    };
    getValue(row: any, key: string): string;
    handleImageError(e: Event): void;
    handleButtonClick(btn: ActionButton, row: any): void;
    handleDropdownClick(option: string, btn: ActionButton, row: any): void;
    toggleRowClass(i: number): void;
    toggleCard(): void;
    nextPage(): void;
    prevPage(): void;
    toggleSelectRow(row: any, e: Event): void;
    toggleAllRows(e: Event): void;
    isAllSelected(): boolean;
    handleBulkAction(btn: ActionButton): void;
    executeAction(button: CardButton): void;
    toLabel(key: string): string;
    trackByIndex(index: number): number;
    get categoryBreakdown(): {
        name: string;
        count: number;
        percent: number;
    }[];
    static ɵfac: i0.ɵɵFactoryDeclaration<NgMoringaTableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgMoringaTableComponent, "ng-moringa-table", never, { "type": { "alias": "type"; "required": false; }; "data": { "alias": "data"; "required": false; }; "columns": { "alias": "columns"; "required": false; }; "showActions": { "alias": "showActions"; "required": false; }; "variant": { "alias": "variant"; "required": false; }; "imgstatus": { "alias": "imgstatus"; "required": false; }; "title": { "alias": "title"; "required": false; }; "sub": { "alias": "sub"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; "moringaHeader": { "alias": "moringaHeader"; "required": false; }; "showFooter": { "alias": "showFooter"; "required": false; }; "collapsible": { "alias": "collapsible"; "required": false; }; "idPrefix": { "alias": "idPrefix"; "required": false; }; "headerButtons": { "alias": "headerButtons"; "required": false; }; "actionButtons": { "alias": "actionButtons"; "required": false; }; "searchBy": { "alias": "searchBy"; "required": false; }; "searchFilter": { "alias": "searchFilter"; "required": false; }; "Sorting": { "alias": "Sorting"; "required": false; }; "autoGenerateColumns": { "alias": "autoGenerateColumns"; "required": false; }; "excludeColumns": { "alias": "excludeColumns"; "required": false; }; "progressBy": { "alias": "progressBy"; "required": false; }; "paginated": { "alias": "paginated"; "required": false; }; "pageSize": { "alias": "pageSize"; "required": false; }; "statusMap": { "alias": "statusMap"; "required": false; }; }, { "rowAction": "rowAction"; }, never, ["[header-component]"], true, never>;
}
export {};

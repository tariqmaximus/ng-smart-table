{"version":3,"file":"ng-moringa-table.mjs","sources":["../../../app/moringa-library/table-lib/ng-moringa-table/ng-moringa-table.component.ts","../../../app/moringa-library/table-lib/ng-moringa-table/ng-moringa-table.component.html","../../../app/moringa-library/table-lib/ng-moringa-table/ng-moringa-table.module.ts","../../../app/moringa-library/table-lib/ng-moringa-table/ng-moringa-table.ts"],"sourcesContent":["import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnChanges,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n\r\ninterface CardButton {\r\n  label?: string;\r\n  icon?: string;\r\n  targetId: string;\r\n  action?: () => void;\r\n}\r\n\r\ninterface ActionButton {\r\n  label?: string;\r\n  tooltip: string;\r\n  icon?: string;\r\n  className?: string;\r\n  isDropdown?: boolean;\r\n  options?: string[];\r\n  action?: (row: any) => void;\r\n  dropdownAction?: (selected: string, row: any) => void;\r\n}\r\n\r\nlet uniqueCounter = 0;\r\n\r\n\r\n@Component({\r\n  selector: 'ng-moringa-table',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  templateUrl: './ng-moringa-table.component.html',\r\n  styleUrls: ['./ng-moringa-table.component.css']\r\n})\r\nexport class NgMoringaTableComponent implements OnInit, OnChanges {\r\n  @Input() type!: string;\r\n  @Input() data: any[] = [];\r\n  @Input() columns: { key: string; label: string }[] = [];\r\n  @Input() showActions = true;\r\n  @Input() variant = '';\r\n  @Input() imgstatus = '';\r\n  @Input() title?: string;\r\n  @Input() sub?: string;\r\n  @Input() icon?: string;\r\n  @Input() moringaHeader = true;\r\n  @Input() showFooter = false;\r\n  @Input() collapsible = false;\r\n  @Input() idPrefix?: string;\r\n  @Input() headerButtons: CardButton[] = [];\r\n  @Input() actionButtons: ActionButton[] = [];\r\n  @Input() searchBy?: string;\r\n  @Input() searchFilter = false;\r\n  @Input() Sorting = false;\r\n  @Input() autoGenerateColumns = true;\r\n  @Input() excludeColumns: string[] = [];\r\n  @Input() progressBy?: string;\r\n  @Input() paginated = false;\r\n  @Input() pageSize = 10;\r\n  @Input() statusMap: Record<string, string> = {};\r\n  @Output() rowAction = new EventEmitter<{ action: string; row: any }>();\r\n\r\n  internalIdPrefix!: string;\r\n  isCollapsed = false;\r\n  activeRowIndex: number | null = null;\r\n  selectedRows: any[] = [];\r\n  filteredData: any[] = [];\r\n\r\n  dataFilters = false;\r\n  searchKeyword = '';\r\n  selectedOption = '';\r\n  startDate: Date | null = null;\r\n  endDate: Date | null = null;\r\n  currentPage = 1;\r\n\r\n  selectedDate = new Date();\r\n  selectedMonth = this.selectedDate.getMonth();\r\n  selectedYear = this.selectedDate.getFullYear();\r\n  datePicker = false;\r\n\r\n  sortKey: string | null = null;\r\n  sortAsc = true;\r\n\r\n  months = [\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ];\r\n\r\n  years = Array.from({ length: 100 }, (_, i) => 1980 + i);\r\n  dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  calendarDays: Date[] = [];\r\n\r\n  ngOnInit(): void {\r\n    this.internalIdPrefix = this.idPrefix || `smart-table-${uniqueCounter++}`;\r\n    this.normalizeActionButtons();\r\n    this.setColumns();\r\n    this.filteredData = [...this.data];\r\n    this.applyFilters();\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    this.applyFilters();\r\n  }\r\n\r\n  toggleFilters(): void {\r\n    this.dataFilters = !this.dataFilters;\r\n    if (!this.dataFilters) this.datePicker = false;\r\n  }\r\n\r\n  applyFilters(): void {\r\n    this.filteredData = this.data.filter(item => {\r\n      const keywordMatch = !this.searchKeyword ||\r\n        Object.values(item).some(val =>\r\n          String(val).toLowerCase().includes(this.searchKeyword.toLowerCase())\r\n        );\r\n\r\n      const optionMatch = !this.selectedOption || item[this.searchKey] === this.selectedOption;\r\n\r\n      const itemDate = item.date ? new Date(item.date) : null;\r\n      const dateMatch =\r\n        (!this.startDate || (itemDate && itemDate >= this.startDate)) &&\r\n        (!this.endDate || (itemDate && itemDate <= this.endDate));\r\n\r\n      return keywordMatch && optionMatch && dateMatch;\r\n    });\r\n\r\n    if (this.sortKey) {\r\n      this.filteredData.sort((a, b) => {\r\n        const aVal = a[this.sortKey!];\r\n        const bVal = b[this.sortKey!];\r\n        return this.sortAsc\r\n          ? (aVal > bVal ? 1 : aVal < bVal ? -1 : 0)\r\n          : (aVal < bVal ? 1 : aVal > bVal ? -1 : 0);\r\n      });\r\n    }\r\n\r\n    this.currentPage = 1;\r\n  }\r\n\r\n  sortByColumn(key: string): void {\r\n    if (this.sortKey === key) {\r\n      this.sortAsc = !this.sortAsc;\r\n    } else {\r\n      this.sortKey = key;\r\n      this.sortAsc = true;\r\n    }\r\n    this.applyFilters();\r\n  }\r\n\r\n  onSearchKeywordChange(value: string): void {\r\n    this.searchKeyword = value;\r\n    this.applyFilters();\r\n  }\r\n\r\n  onSearchOptionChange(event: Event): void {\r\n    this.selectedOption = (event.target as HTMLSelectElement).value;\r\n    this.applyFilters();\r\n  }\r\n\r\n  toggleCalendar(): void {\r\n    this.datePicker = !this.datePicker;\r\n    this.generateCalendar();\r\n  }\r\n\r\n  generateCalendar(): void {\r\n    const date = new Date(this.selectedYear, this.selectedMonth, 1);\r\n    const days: Date[] = [];\r\n\r\n    while (date.getMonth() === this.selectedMonth) {\r\n      days.push(new Date(date));\r\n      date.setDate(date.getDate() + 1);\r\n    }\r\n\r\n    const startDay = new Date(this.selectedYear, this.selectedMonth, 1).getDay();\r\n    for (let i = 0; i < startDay; i++) {\r\n      days.unshift(new Date(0));\r\n    }\r\n\r\n    this.calendarDays = days;\r\n  }\r\n\r\n  selectDate(date: Date): void {\r\n    if (!isNaN(date.getTime())) {\r\n      this.selectedDate = new Date(date);\r\n    }\r\n  }\r\n\r\n  isSelected(date: Date): boolean {\r\n    return (\r\n      date.getDate() === this.selectedDate.getDate() &&\r\n      date.getMonth() === this.selectedDate.getMonth() &&\r\n      date.getFullYear() === this.selectedDate.getFullYear()\r\n    );\r\n  }\r\n\r\n  cancel(): void {\r\n    this.datePicker = false;\r\n  }\r\n\r\n  confirm(): void {\r\n    this.startDate = this.selectedDate;\r\n    this.endDate = this.selectedDate;\r\n    this.applyFilters();\r\n    this.datePicker = false;\r\n  }\r\n\r\n  setColumns(): void {\r\n    if ((!this.columns || this.columns.length === 0) && this.autoGenerateColumns && this.data.length > 0) {\r\n      const keys = Object.keys(this.data[0]).filter(k => !this.excludeColumns.includes(k));\r\n      this.columns = keys.map(key => ({ key, label: this.toLabel(key) }));\r\n    }\r\n\r\n    if (this.showActions && this.actionButtons.length > 0 && !this.columns.some(c => c.key === 'action')) {\r\n      this.columns.push({ key: 'action', label: 'Actions' });\r\n    }\r\n  }\r\n\r\n  normalizeActionButtons(): void {\r\n    this.actionButtons = this.actionButtons.map(btn =>\r\n      typeof btn === 'string' ? { label: btn, tooltip: btn, className: 'btn' } : btn\r\n    );\r\n  }\r\n\r\n  get prefix(): string {\r\n    return this.internalIdPrefix;\r\n  }\r\n\r\n  get shouldShowSearchOptions(): boolean {\r\n    return !!this.searchBy;\r\n  }\r\n\r\n  get searchKey(): string {\r\n    return this.searchBy || '';\r\n  }\r\n\r\n  get searchOptions(): string[] {\r\n    return [...new Set(this.data.map(item => item[this.searchKey]).filter(Boolean))]\r\n      .sort((a, b) => a.localeCompare(b));\r\n  }\r\n\r\n  get pagedData(): any[] {\r\n    const start = (this.currentPage - 1) * this.pageSize;\r\n    return this.paginated ? this.filteredData.slice(start, start + this.pageSize) : this.filteredData;\r\n  }\r\n\r\n  get totalPages(): number {\r\n    return Math.ceil(this.filteredData.length / this.pageSize);\r\n  }\r\n\r\n  get progressValue(): number {\r\n    if (!this.progressBy || !this.searchKey || !this.data.length) return 0;\r\n    const statusToCheck = this.selectedOption || this.progressBy;\r\n    const total = this.data.length;\r\n    const match = this.data.filter(item => item[this.searchKey] === statusToCheck).length;\r\n    return Math.round((match / total) * 100);\r\n  }\r\n\r\n  getStatusStyles(status: string): { tagClass: string; progressClass: string } {\r\n    const key = status?.toLowerCase() || '';\r\n    const color = this.statusMap?.[key] || 'info';\r\n    return {\r\n      tagClass: `tag ${color}`,\r\n      progressClass: `progress-bar ${color}`\r\n    };\r\n  }\r\n\r\n  getValue(row: any, key: string): string {\r\n    const val = row?.[key];\r\n    return val !== undefined && val !== null ? String(val) : '-';\r\n  }\r\n\r\n  handleImageError(e: Event): void {\r\n    (e.target as HTMLImageElement).src = 'assets/dummy.jpg';\r\n  }\r\n\r\n  handleButtonClick(btn: ActionButton, row: any): void {\r\n    btn.action?.(row);\r\n    this.rowAction.emit({ action: btn.label || '', row });\r\n  }\r\n\r\n  handleDropdownClick(option: string, btn: ActionButton, row: any): void {\r\n    btn.dropdownAction?.(option, row);\r\n  }\r\n\r\n  toggleRowClass(i: number): void {\r\n    this.activeRowIndex = this.activeRowIndex === i ? null : i;\r\n  }\r\n\r\n  toggleCard(): void {\r\n    if (this.collapsible) this.isCollapsed = !this.isCollapsed;\r\n  }\r\n\r\n  nextPage(): void {\r\n    if (this.currentPage < this.totalPages) this.currentPage++;\r\n  }\r\n\r\n  prevPage(): void {\r\n    if (this.currentPage > 1) this.currentPage--;\r\n  }\r\n\r\n  toggleSelectRow(row: any, e: Event): void {\r\n    const cb = e.target as HTMLInputElement;\r\n    cb.checked\r\n      ? this.selectedRows.push(row)\r\n      : this.selectedRows = this.selectedRows.filter(r => r !== row);\r\n  }\r\n\r\n  toggleAllRows(e: Event): void {\r\n    const cb = e.target as HTMLInputElement;\r\n    this.selectedRows = cb.checked ? [...this.pagedData] : [];\r\n  }\r\n\r\n  isAllSelected(): boolean {\r\n    return this.pagedData.length > 0 && this.selectedRows.length === this.pagedData.length;\r\n  }\r\n\r\n  handleBulkAction(btn: ActionButton): void {\r\n    if (!this.selectedRows.length) return alert('Please select at least one row.');\r\n    if (btn.action) this.selectedRows.forEach(row => btn.action!(row));\r\n    if (btn.dropdownAction && btn.options?.length) {\r\n      const userChoice = prompt(`Choose an option: ${btn.options.join(', ')}`) || btn.options[0];\r\n      this.selectedRows.forEach(row => btn.dropdownAction!(userChoice, row));\r\n    }\r\n  }\r\n\r\n  executeAction(button: CardButton): void {\r\n    button.action?.();\r\n  }\r\n\r\n  toLabel(key: string): string {\r\n    return key.replace(/_/g, ' ').replace(/\\b\\w/g, c => c.toUpperCase());\r\n  }\r\n\r\n  trackByIndex(index: number): number {\r\n    return index;\r\n  }\r\n\r\n  get categoryBreakdown(): { name: string; count: number; percent: number }[] {\r\n    if (!this.searchKey) return [];\r\n\r\n    const total = this.filteredData.length;\r\n    const counts: Record<string, number> = {};\r\n\r\n    for (const item of this.filteredData) {\r\n      const key = item[this.searchKey];\r\n      if (key) {\r\n        counts[key] = (counts[key] || 0) + 1;\r\n      }\r\n    }\r\n\r\n    return Object.entries(counts).map(([name, count]) => ({\r\n      name,\r\n      count,\r\n      percent: total ? Math.round((count / total) * 100) : 0\r\n    }));\r\n  }\r\n}","<div class=\"moringa-wraper\"  [class.collapsed]=\"isCollapsed\">\r\n \r\n  <div class=\"moringa-wraper-header\" *ngIf=\"moringaHeader\">\r\n    <div class=\"container-fluid \">\r\n      \r\n        <div class=\"d-flex align-items-center gap-2\">\r\n          <ng-content select=\"[header-component]\"></ng-content>\r\n         <i class=\"title-icon\" *ngIf=\"icon\" [class]=\"icon\"></i>\r\n          <h6 class=\"table-title\"> \r\n            {{ title }}\r\n            <span class=\"text-muted\">{{ sub }}</span>\r\n          </h6>\r\n        </div>\r\n        <div class=\"d-flex align-items-center flex-wrap gap-2 justify-content-end\">\r\n          <div class=\"form-group mb-0\">\r\n            <button *ngIf=\"searchFilter\" class=\"btn \" (click)=\"toggleFilters()\">\r\n              <i class=\"bi bi-search\"></i>\r\n            </button>\r\n\r\n            <ng-container *ngIf=\"dataFilters\">\r\n\r\n              <select class=\"form-select\" [(ngModel)]=\"selectedOption\" (change)=\"applyFilters()\">\r\n                <option value=\"\">All</option>\r\n                <option *ngFor=\"let option of searchOptions\" [value]=\"option\">{{ option }}</option>\r\n              </select>\r\n\r\n              <!-- Keyword input -->\r\n              <input type=\"text\" class=\"form-control\" placeholder=\"Search...\" [(ngModel)]=\"searchKeyword\"\r\n                (ngModelChange)=\"onSearchKeywordChange($event)\" />\r\n\r\n              <!-- Date calendar button -->\r\n              <input class=\"btn\" (click)=\"toggleCalendar()\" style=\"min-width: 120px;\" value=\"{{ selectedDate | date: 'y, MMMM, d' }}\">\r\n              \r\n                \r\n           \r\n\r\n\r\n              <!-- Calendar Popup -->\r\n              <div class=\"date-picker\" *ngIf=\"datePicker\" style=\"min-width: 350px;\">\r\n                <div class=\"d-flex justify-content-between gap-2 mb-2\">\r\n                  <select class=\"form-select\" [(ngModel)]=\"selectedMonth\">\r\n                    <option *ngFor=\"let m of months; let i = index\" [value]=\"i\">{{ m }}</option>\r\n                  </select>\r\n                  <select class=\"form-select\" [(ngModel)]=\"selectedYear\">\r\n                    <option *ngFor=\"let y of years\" [value]=\"y\">{{ y }}</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div class=\"d-grid\" style=\"grid-template-columns: repeat(7, 1fr); gap: 4px;\">\r\n                  <div class=\"text-center fw-bold\" *ngFor=\"let d of dayNames\">{{ d }}</div>\r\n                  <div *ngFor=\"let day of calendarDays\" class=\"text-center p-1 border rounded\"\r\n                    [class.bg-primary]=\"isSelected(day)\" [class.text-white]=\"isSelected(day)\" (click)=\"selectDate(day)\"\r\n                    style=\"cursor: pointer;\">\r\n                    {{ day.getDate() }}\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"d-flex justify-content-between mt-3\">\r\n                  <button class=\"btn btn-sm\" (click)=\"cancel()\">Cancel</button>\r\n                  <button class=\"btn btn-sm btn-primary\" (click)=\"confirm()\">Confirm</button>\r\n                </div>\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n          <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n            <button *ngFor=\"let button of headerButtons\" type=\"button\" class=\"btn \" [id]=\"button.targetId\"\r\n              (click)=\"executeAction(button)\">\r\n              <i *ngIf=\"button.icon\" [class]=\"button.icon\"></i>\r\n              <span *ngIf=\"button.label\">{{ button.label }}</span>\r\n            </button>\r\n\r\n            <button *ngIf=\"collapsible\" class=\"btn \" type=\"button\" (click)=\"toggleCard()\">\r\n              <i [class]=\"isCollapsed ? 'bi bi-arrows-expand' : 'bi bi-arrows-collapse'\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n     \r\n    </div>\r\n    \r\n   <div *ngIf=\"progressBy\" class=\"progress\">\r\n      <div class=\"progress-bar\" [ngClass]=\"getStatusStyles(selectedOption || progressBy).progressClass\"\r\n        role=\"progressbar\" [style.width.%]=\"progressValue\" [attr.aria-valuenow]=\"progressValue\" aria-valuemin=\"0\"\r\n        aria-valuemax=\"100\">\r\n        <p class=\"tag\">{{ progressValue }}%</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  \r\n  <div class=\"moringa-wraper-body  p-0\">\r\n   \r\n    <div class=\"pt-2 \">\r\n      <table [ngClass]=\"variant\">\r\n        <thead>\r\n          <tr>\r\n            <th *ngFor=\"let column of columns; let colIndex = index\" (click)=\"Sorting ? sortByColumn(column.key) : null\"\r\n              class=\"text-nowrap text-start align-middle \" style=\"cursor: pointer;\" scope=\"col\">\r\n              <div class=\"d-flex align-items-center gap-2\">\r\n                <!-- Always show Select All checkbox -->\r\n                <ng-container *ngIf=\"colIndex === 0\">\r\n                  <div class=\"checkbox-wrapper\">\r\n                    <input class=\"inp-cbx\" [id]=\"prefix + '-cbx-header'\" type=\"checkbox\"\r\n                      (click)=\"$event.stopPropagation()\" (change)=\"toggleAllRows($event)\" [checked]=\"isAllSelected()\" />\r\n\r\n                    <label class=\"cbx\" [for]=\"prefix + '-cbx-header'\">\r\n                      <div class=\"checkbox\">\r\n                        <svg width=\"12px\" height=\"10px\" viewBox=\"0 0 12 10\">\r\n                          <polyline points=\"1.5 6 4.5 9 10.5 1\"></polyline>\r\n                        </svg>\r\n                      </div>\r\n                      <div *ngIf=\"selectedRows.length > 1\" class=\"dropdown \">\r\n                        <button class=\"btn no-bg p-0\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"\r\n                          (click)=\"$event.stopPropagation()\">\r\n                          <i class=\"bi bi-three-dots-vertical\"></i>\r\n                        </button>\r\n                        <ul class=\"dropdown-menu\">\r\n                          <li *ngFor=\"let btn of actionButtons\">\r\n                            <button class=\"dropdown-item\" (click)=\"handleBulkAction(btn)\">\r\n                              {{ btn.label }}\r\n                            </button>\r\n                          </li>\r\n                        </ul>\r\n                      </div>\r\n                    </label>\r\n                  </div>\r\n                </ng-container>\r\n                <!-- Column Label -->\r\n                <span>{{ column.label }}</span>\r\n\r\n                <!-- Sort Icon -->\r\n                <i *ngIf=\"Sorting\" class=\"ms-1\" [ngClass]=\"{\r\n        'bi bi-arrow-up': sortKey === column.key && sortAsc,\r\n        'bi bi-arrow-down': sortKey === column.key && !sortAsc,\r\n        'bi bi-arrow-down-up': sortKey !== column.key\r\n      }\"></i>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let row of pagedData; let i = index; trackBy: trackByIndex\"\r\n            [ngClass]=\"{ 'dynamic-row': activeRowIndex === i }\">\r\n            <td *ngFor=\"let column of columns\"  >\r\n              <ng-container [ngSwitch]=\"column.key\">\r\n                <ng-container *ngSwitchCase=\"'profileImage'\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <div class=\"checkbox-wrapper\">\r\n                      <input class=\"inp-cbx\" [id]=\"prefix + '-cbx-' + i\" type=\"checkbox\"\r\n                        (change)=\"toggleSelectRow(row, $event)\" [checked]=\"selectedRows.includes(row)\" />\r\n                      <label class=\"cbx\" [for]=\"prefix + '-cbx-' + i\">\r\n                        <div class=\"checkbox\">\r\n                          <svg width=\"12px\" height=\"10px\" viewBox=\"0 0 12 10\">\r\n                            <polyline points=\"1.5 6 4.5 9 10.5 1\"></polyline>\r\n                          </svg>\r\n                        </div>\r\n                        <p class=\"mb-0\"></p>\r\n                      </label>\r\n                    </div>\r\n                    <div class=\"media-tile\">\r\n                      <div class=\"media-img sm  round-md\" [ngClass]=\" statusMap[row.status]\">\r\n                        <img class=\"img-fluid\" [src]=\"row.profileImage || 'assets/dummy.jpg'\" alt=\"Profile Picture\"\r\n                          (error)=\"handleImageError($event)\" />\r\n                      </div>\r\n                      <div class=\"profile-details\">\r\n                        <p class=\"mb-0 name  text-dark\">{{ row.name || 'Unknown' }}</p>\r\n                        <p class=\"mb-0 text-muted\">{{ row.source || 'No Information' }}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </ng-container>\r\n                <ng-container *ngSwitchCase=\"'status'\">\r\n                  <span [ngClass]=\"getStatusStyles(row.status).tagClass\">\r\n                    {{ getValue(row, column.key) }}\r\n                  </span>\r\n                </ng-container>\r\n                <ng-container *ngSwitchCase=\"'action'\">\r\n                  <div class=\"form-group align-right mb-0\">\r\n                    <ng-container *ngFor=\"let btn of actionButtons\">\r\n                      <button *ngIf=\"!btn.isDropdown\" class=\"btn btn-sm\" [ngClass]=\"btn.className\"\r\n                        [attr.title]=\"btn.tooltip\" (click)=\"handleButtonClick(btn, row)\">\r\n                        <i *ngIf=\"btn.icon\" [class]=\"btn.icon\"></i>\r\n\r\n                      </button>\r\n                      <div *ngIf=\"btn.isDropdown\" class=\"dropdown btn btn-sm\">\r\n                        <button class=\"btn no-bg dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\"\r\n                          [ngClass]=\"btn.className\" [attr.title]=\"btn.tooltip\">\r\n                          {{ btn.label }}\r\n                        </button>\r\n                        <ul class=\"dropdown-menu\">\r\n                          <li *ngFor=\"let option of btn.options\">\r\n                            <button class=\"dropdown-item\" (click)=\"handleDropdownClick(option, btn, row)\">\r\n                              {{ option }}\r\n                            </button>\r\n                          </li>\r\n                        </ul>\r\n                      </div>\r\n                    </ng-container>\r\n                  </div>\r\n                </ng-container>\r\n                <ng-container *ngSwitchDefault>\r\n                  <span class=\"value\">{{ getValue(row, column.key) }}</span>\r\n                </ng-container>\r\n              </ng-container>\r\n            </td>\r\n            <td class=\"mobile-btn\">\r\n              <button class=\"btn\" (click)=\"toggleRowClass(i)\">\r\n                <i [ngClass]=\"{\r\n                'bi bi-chevron-down': activeRowIndex === i,\r\n                'bi bi-chevron-right': activeRowIndex !== i\r\n              }\"></i>\r\n              </button>\r\n            </td>\r\n          </tr>\r\n          <tr *ngIf=\"pagedData.length === 0\">\r\n            <td [attr.colspan]=\"columns.length + 2\" class=\"text-center py-3\">\r\n              No records found.\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n        <tfoot *ngIf=\"paginated\">\r\n          <tr>\r\n            <td [attr.colspan]=\"columns.length + 1\">\r\n              <div class=\"pagination form-group justify-content-end \">\r\n                <button class=\"btn\" (click)=\"prevPage()\" [disabled]=\"currentPage === 1\">\r\n                  <i class=\"bi bi-chevron-left\"></i>\r\n                </button>\r\n                <span class=\"btn\">Page {{ currentPage }} of {{ totalPages }}</span>\r\n                <button class=\"btn\" (click)=\"nextPage()\" [disabled]=\"currentPage === totalPages\">\r\n                  <i class=\"bi bi-chevron-right\"></i>\r\n                </button>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </tfoot>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgMoringaTableComponent } from './ng-moringa-table.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    NgMoringaTableComponent // ✅ IMPORT instead of DECLARE\r\n  ],\r\n  exports: [NgMoringaTableComponent]\r\n})\r\nexport class NgMoringaTableModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;AA8BA,IAAI,aAAa,GAAG,CAAC;MAUR,uBAAuB,CAAA;AACzB,IAAA,IAAI;IACJ,IAAI,GAAU,EAAE;IAChB,OAAO,GAAqC,EAAE;IAC9C,WAAW,GAAG,IAAI;IAClB,OAAO,GAAG,EAAE;IACZ,SAAS,GAAG,EAAE;AACd,IAAA,KAAK;AACL,IAAA,GAAG;AACH,IAAA,IAAI;IACJ,aAAa,GAAG,IAAI;IACpB,UAAU,GAAG,KAAK;IAClB,WAAW,GAAG,KAAK;AACnB,IAAA,QAAQ;IACR,aAAa,GAAiB,EAAE;IAChC,aAAa,GAAmB,EAAE;AAClC,IAAA,QAAQ;IACR,YAAY,GAAG,KAAK;IACpB,OAAO,GAAG,KAAK;IACf,mBAAmB,GAAG,IAAI;IAC1B,cAAc,GAAa,EAAE;AAC7B,IAAA,UAAU;IACV,SAAS,GAAG,KAAK;IACjB,QAAQ,GAAG,EAAE;IACb,SAAS,GAA2B,EAAE;AACrC,IAAA,SAAS,GAAG,IAAI,YAAY,EAAgC;AAEtE,IAAA,gBAAgB;IAChB,WAAW,GAAG,KAAK;IACnB,cAAc,GAAkB,IAAI;IACpC,YAAY,GAAU,EAAE;IACxB,YAAY,GAAU,EAAE;IAExB,WAAW,GAAG,KAAK;IACnB,aAAa,GAAG,EAAE;IAClB,cAAc,GAAG,EAAE;IACnB,SAAS,GAAgB,IAAI;IAC7B,OAAO,GAAgB,IAAI;IAC3B,WAAW,GAAG,CAAC;AAEf,IAAA,YAAY,GAAG,IAAI,IAAI,EAAE;AACzB,IAAA,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;AAC5C,IAAA,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE;IAC9C,UAAU,GAAG,KAAK;IAElB,OAAO,GAAkB,IAAI;IAC7B,OAAO,GAAG,IAAI;AAEd,IAAA,MAAM,GAAG;QACP,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM;QACtD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE;KACvD;IAED,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC;AACvD,IAAA,QAAQ,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAC5D,YAAY,GAAW,EAAE;IAEzB,QAAQ,GAAA;QACN,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAe,YAAA,EAAA,aAAa,EAAE,CAAA,CAAE;QACzE,IAAI,CAAC,sBAAsB,EAAE;QAC7B,IAAI,CAAC,UAAU,EAAE;QACjB,IAAI,CAAC,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;QAClC,IAAI,CAAC,YAAY,EAAE;;IAGrB,WAAW,GAAA;QACT,IAAI,CAAC,YAAY,EAAE;;IAGrB,aAAa,GAAA;AACX,QAAA,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW;QACpC,IAAI,CAAC,IAAI,CAAC,WAAW;AAAE,YAAA,IAAI,CAAC,UAAU,GAAG,KAAK;;IAGhD,YAAY,GAAA;QACV,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,IAAG;AAC1C,YAAA,MAAM,YAAY,GAAG,CAAC,IAAI,CAAC,aAAa;AACtC,gBAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,IAC1B,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,CACrE;AAEH,YAAA,MAAM,WAAW,GAAG,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,CAAC,cAAc;AAExF,YAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI;AACvD,YAAA,MAAM,SAAS,GACb,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,QAAQ,IAAI,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC;AAC5D,iBAAC,CAAC,IAAI,CAAC,OAAO,KAAK,QAAQ,IAAI,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;AAE3D,YAAA,OAAO,YAAY,IAAI,WAAW,IAAI,SAAS;AACjD,SAAC,CAAC;AAEF,QAAA,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAI;gBAC9B,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,OAAQ,CAAC;gBAC7B,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,OAAQ,CAAC;gBAC7B,OAAO,IAAI,CAAC;uBACP,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;uBACtC,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AAC9C,aAAC,CAAC;;AAGJ,QAAA,IAAI,CAAC,WAAW,GAAG,CAAC;;AAGtB,IAAA,YAAY,CAAC,GAAW,EAAA;AACtB,QAAA,IAAI,IAAI,CAAC,OAAO,KAAK,GAAG,EAAE;AACxB,YAAA,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO;;aACvB;AACL,YAAA,IAAI,CAAC,OAAO,GAAG,GAAG;AAClB,YAAA,IAAI,CAAC,OAAO,GAAG,IAAI;;QAErB,IAAI,CAAC,YAAY,EAAE;;AAGrB,IAAA,qBAAqB,CAAC,KAAa,EAAA;AACjC,QAAA,IAAI,CAAC,aAAa,GAAG,KAAK;QAC1B,IAAI,CAAC,YAAY,EAAE;;AAGrB,IAAA,oBAAoB,CAAC,KAAY,EAAA;QAC/B,IAAI,CAAC,cAAc,GAAI,KAAK,CAAC,MAA4B,CAAC,KAAK;QAC/D,IAAI,CAAC,YAAY,EAAE;;IAGrB,cAAc,GAAA;AACZ,QAAA,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU;QAClC,IAAI,CAAC,gBAAgB,EAAE;;IAGzB,gBAAgB,GAAA;AACd,QAAA,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QAC/D,MAAM,IAAI,GAAW,EAAE;QAEvB,OAAO,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,aAAa,EAAE;YAC7C,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;YACzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;;AAGlC,QAAA,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE;AAC5E,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;YACjC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;;AAG3B,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI;;AAG1B,IAAA,UAAU,CAAC,IAAU,EAAA;QACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE;YAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC;;;AAItC,IAAA,UAAU,CAAC,IAAU,EAAA;QACnB,QACE,IAAI,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YAC9C,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;YAChD,IAAI,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE;;IAI1D,MAAM,GAAA;AACJ,QAAA,IAAI,CAAC,UAAU,GAAG,KAAK;;IAGzB,OAAO,GAAA;AACL,QAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY;AAClC,QAAA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY;QAChC,IAAI,CAAC,YAAY,EAAE;AACnB,QAAA,IAAI,CAAC,UAAU,GAAG,KAAK;;IAGzB,UAAU,GAAA;QACR,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,KAAK,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;AACpG,YAAA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACpF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;;AAGrE,QAAA,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,QAAQ,CAAC,EAAE;AACpG,YAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;;;IAI1D,sBAAsB,GAAA;AACpB,QAAA,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,IAC7C,OAAO,GAAG,KAAK,QAAQ,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,GAAG,CAC/E;;AAGH,IAAA,IAAI,MAAM,GAAA;QACR,OAAO,IAAI,CAAC,gBAAgB;;AAG9B,IAAA,IAAI,uBAAuB,GAAA;AACzB,QAAA,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ;;AAGxB,IAAA,IAAI,SAAS,GAAA;AACX,QAAA,OAAO,IAAI,CAAC,QAAQ,IAAI,EAAE;;AAG5B,IAAA,IAAI,aAAa,GAAA;AACf,QAAA,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC5E,aAAA,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;;AAGvC,IAAA,IAAI,SAAS,GAAA;AACX,QAAA,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ;QACpD,OAAO,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,YAAY;;AAGnG,IAAA,IAAI,UAAU,GAAA;AACZ,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;;AAG5D,IAAA,IAAI,aAAa,GAAA;AACf,QAAA,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM;AAAE,YAAA,OAAO,CAAC;QACtE,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,UAAU;AAC5D,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM;QAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,aAAa,CAAC,CAAC,MAAM;AACrF,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,KAAK,IAAI,GAAG,CAAC;;AAG1C,IAAA,eAAe,CAAC,MAAc,EAAA;QAC5B,MAAM,GAAG,GAAG,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE;QACvC,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI,MAAM;QAC7C,OAAO;YACL,QAAQ,EAAE,CAAO,IAAA,EAAA,KAAK,CAAE,CAAA;YACxB,aAAa,EAAE,CAAgB,aAAA,EAAA,KAAK,CAAE;SACvC;;IAGH,QAAQ,CAAC,GAAQ,EAAE,GAAW,EAAA;AAC5B,QAAA,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACtB,QAAA,OAAO,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG;;AAG9D,IAAA,gBAAgB,CAAC,CAAQ,EAAA;AACtB,QAAA,CAAC,CAAC,MAA2B,CAAC,GAAG,GAAG,kBAAkB;;IAGzD,iBAAiB,CAAC,GAAiB,EAAE,GAAQ,EAAA;AAC3C,QAAA,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;AACjB,QAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,KAAK,IAAI,EAAE,EAAE,GAAG,EAAE,CAAC;;AAGvD,IAAA,mBAAmB,CAAC,MAAc,EAAE,GAAiB,EAAE,GAAQ,EAAA;QAC7D,GAAG,CAAC,cAAc,GAAG,MAAM,EAAE,GAAG,CAAC;;AAGnC,IAAA,cAAc,CAAC,CAAS,EAAA;AACtB,QAAA,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC;;IAG5D,UAAU,GAAA;QACR,IAAI,IAAI,CAAC,WAAW;AAAE,YAAA,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW;;IAG5D,QAAQ,GAAA;AACN,QAAA,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU;YAAE,IAAI,CAAC,WAAW,EAAE;;IAG5D,QAAQ,GAAA;AACN,QAAA,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC;YAAE,IAAI,CAAC,WAAW,EAAE;;IAG9C,eAAe,CAAC,GAAQ,EAAE,CAAQ,EAAA;AAChC,QAAA,MAAM,EAAE,GAAG,CAAC,CAAC,MAA0B;AACvC,QAAA,EAAE,CAAC;cACC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG;AAC5B,cAAE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC;;AAGlE,IAAA,aAAa,CAAC,CAAQ,EAAA;AACpB,QAAA,MAAM,EAAE,GAAG,CAAC,CAAC,MAA0B;AACvC,QAAA,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE;;IAG3D,aAAa,GAAA;AACX,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM;;AAGxF,IAAA,gBAAgB,CAAC,GAAiB,EAAA;AAChC,QAAA,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM;AAAE,YAAA,OAAO,KAAK,CAAC,iCAAiC,CAAC;QAC9E,IAAI,GAAG,CAAC,MAAM;AAAE,YAAA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,MAAO,CAAC,GAAG,CAAC,CAAC;QAClE,IAAI,GAAG,CAAC,cAAc,IAAI,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE;YAC7C,MAAM,UAAU,GAAG,MAAM,CAAC,qBAAqB,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAE,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;AAC1F,YAAA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,cAAe,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;;;AAI1E,IAAA,aAAa,CAAC,MAAkB,EAAA;AAC9B,QAAA,MAAM,CAAC,MAAM,IAAI;;AAGnB,IAAA,OAAO,CAAC,GAAW,EAAA;QACjB,OAAO,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;;AAGtE,IAAA,YAAY,CAAC,KAAa,EAAA;AACxB,QAAA,OAAO,KAAK;;AAGd,IAAA,IAAI,iBAAiB,GAAA;QACnB,IAAI,CAAC,IAAI,CAAC,SAAS;AAAE,YAAA,OAAO,EAAE;AAE9B,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM;QACtC,MAAM,MAAM,GAA2B,EAAE;AAEzC,QAAA,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,YAAY,EAAE;YACpC,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;YAChC,IAAI,GAAG,EAAE;AACP,gBAAA,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;;;AAIxC,QAAA,OAAO,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM;YACpD,IAAI;YACJ,KAAK;YACL,OAAO,EAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,KAAK,IAAI,GAAG,CAAC,GAAG;AACtD,SAAA,CAAC,CAAC;;wGA/TM,uBAAuB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA;AAAvB,IAAA,OAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,EAAA,uBAAuB,ECxCpC,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,EAAA,WAAA,EAAA,aAAA,EAAA,OAAA,EAAA,SAAA,EAAA,SAAA,EAAA,WAAA,EAAA,KAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,aAAA,EAAA,eAAA,EAAA,UAAA,EAAA,YAAA,EAAA,WAAA,EAAA,aAAA,EAAA,QAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,EAAA,aAAA,EAAA,eAAA,EAAA,QAAA,EAAA,UAAA,EAAA,YAAA,EAAA,cAAA,EAAA,OAAA,EAAA,SAAA,EAAA,mBAAA,EAAA,qBAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,UAAA,EAAA,YAAA,EAAA,SAAA,EAAA,WAAA,EAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAAA,WAAA,EAAA,EAAA,OAAA,EAAA,EAAA,SAAA,EAAA,WAAA,EAAA,EAAA,aAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EAAA,g/XA6OM,EDzMM,MAAA,EAAA,CAAA,y7eAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,YAAY,4pBAAE,WAAW,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,OAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,uBAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,OAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,8MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,0BAAA,EAAA,QAAA,EAAA,6GAAA,EAAA,MAAA,EAAA,CAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,eAAA,EAAA,QAAA,EAAA,2CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,qDAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,SAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,EAAA,CAAA,eAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAA,EAAA,CAAA;;4FAIxB,uBAAuB,EAAA,UAAA,EAAA,CAAA;kBAPnC,SAAS;AACE,YAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,kBAAkB,cAChB,IAAI,EAAA,OAAA,EACP,CAAC,YAAY,EAAE,WAAW,CAAC,EAAA,QAAA,EAAA,g/XAAA,EAAA,MAAA,EAAA,CAAA,y7eAAA,CAAA,EAAA;8BAK3B,IAAI,EAAA,CAAA;sBAAZ;gBACQ,IAAI,EAAA,CAAA;sBAAZ;gBACQ,OAAO,EAAA,CAAA;sBAAf;gBACQ,WAAW,EAAA,CAAA;sBAAnB;gBACQ,OAAO,EAAA,CAAA;sBAAf;gBACQ,SAAS,EAAA,CAAA;sBAAjB;gBACQ,KAAK,EAAA,CAAA;sBAAb;gBACQ,GAAG,EAAA,CAAA;sBAAX;gBACQ,IAAI,EAAA,CAAA;sBAAZ;gBACQ,aAAa,EAAA,CAAA;sBAArB;gBACQ,UAAU,EAAA,CAAA;sBAAlB;gBACQ,WAAW,EAAA,CAAA;sBAAnB;gBACQ,QAAQ,EAAA,CAAA;sBAAhB;gBACQ,aAAa,EAAA,CAAA;sBAArB;gBACQ,aAAa,EAAA,CAAA;sBAArB;gBACQ,QAAQ,EAAA,CAAA;sBAAhB;gBACQ,YAAY,EAAA,CAAA;sBAApB;gBACQ,OAAO,EAAA,CAAA;sBAAf;gBACQ,mBAAmB,EAAA,CAAA;sBAA3B;gBACQ,cAAc,EAAA,CAAA;sBAAtB;gBACQ,UAAU,EAAA,CAAA;sBAAlB;gBACQ,SAAS,EAAA,CAAA;sBAAjB;gBACQ,QAAQ,EAAA,CAAA;sBAAhB;gBACQ,SAAS,EAAA,CAAA;sBAAjB;gBACS,SAAS,EAAA,CAAA;sBAAlB;;;MEpDU,oBAAoB,CAAA;wGAApB,oBAAoB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA;AAApB,IAAA,OAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,oBAAoB,YAN7B,YAAY;YACZ,WAAW;AACX,YAAA,uBAAuB;qBAEf,uBAAuB,CAAA,EAAA,CAAA;AAEtB,IAAA,OAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,oBAAoB,YAN7B,YAAY;YACZ,WAAW;AACX,YAAA,uBAAuB;;;4FAId,oBAAoB,EAAA,UAAA,EAAA,CAAA;kBARhC,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,OAAO,EAAE;wBACP,YAAY;wBACZ,WAAW;AACX,wBAAA,uBAAuB;AACxB,qBAAA;oBACD,OAAO,EAAE,CAAC,uBAAuB;AAClC,iBAAA;;;ACZD;;AAEG;;;;"}